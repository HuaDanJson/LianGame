package com.aidebar.greendaotest.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yottamobile.doraemon.bean.CurrentUser;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CURRENT_USER".
*/
public class CurrentUserDao extends AbstractDao<CurrentUser, Long> {

    public static final String TABLENAME = "CURRENT_USER";

    /**
     * Properties of entity CurrentUser.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Score = new Property(1, int.class, "score", false, "CurrentUser");
        public final static Property HelperCards = new Property(2, int.class, "helperCards", false, "HELPER_CARDS");
        public final static Property DoubleCards = new Property(3, int.class, "doubleCards", false, "DOUBLE_CARDS");
        public final static Property TextColor = new Property(4, int.class, "textColor", false, "TEXT_COLOR");
    }


    public CurrentUserDao(DaoConfig config) {
        super(config);
    }
    
    public CurrentUserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CURRENT_USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CurrentUser\" INTEGER NOT NULL ," + // 1: score
                "\"HELPER_CARDS\" INTEGER NOT NULL ," + // 2: helperCards
                "\"DOUBLE_CARDS\" INTEGER NOT NULL ," + // 3: doubleCards
                "\"TEXT_COLOR\" INTEGER NOT NULL );"); // 4: textColor
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CURRENT_USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CurrentUser entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getScore());
        stmt.bindLong(3, entity.getHelperCards());
        stmt.bindLong(4, entity.getDoubleCards());
        stmt.bindLong(5, entity.getTextColor());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CurrentUser entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getScore());
        stmt.bindLong(3, entity.getHelperCards());
        stmt.bindLong(4, entity.getDoubleCards());
        stmt.bindLong(5, entity.getTextColor());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CurrentUser readEntity(Cursor cursor, int offset) {
        CurrentUser entity = new CurrentUser( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // score
            cursor.getInt(offset + 2), // helperCards
            cursor.getInt(offset + 3), // doubleCards
            cursor.getInt(offset + 4) // textColor
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CurrentUser entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setScore(cursor.getInt(offset + 1));
        entity.setHelperCards(cursor.getInt(offset + 2));
        entity.setDoubleCards(cursor.getInt(offset + 3));
        entity.setTextColor(cursor.getInt(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CurrentUser entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CurrentUser entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CurrentUser entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
